// <auto-generated>This is auto-generated code by a DIS Macro. Do not modify.</auto-generated>
namespace Skyline.Protocol.Tables
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using Skyline.DataMiner.ConnectorAPI.SkylineCommunications.ExampleInterAppCalls.Messages.MyTable;
	using Skyline.DataMiner.Net.Helper;
	using Skyline.DataMiner.Scripting;

	using SLNetMessages = Skyline.DataMiner.Net.Messages;

	public class MyTableRow
	{
		public MyTableRow() { }

		public MyTableRow(params object[] row)
		{
			Instance = Convert.ToString(row[0]);
			MyNumericColumn = Convert.ToDouble(row[1]);
			MyStringColumn = Convert.ToString(row[2]);
			MyDiscreetColumn = (DiscreetColumnOption)Convert.ToInt32(row[3]);
		}

		public string Instance { get; set; }

		public double MyNumericColumn { get; set; }

		public string MyStringColumn { get; set; }

		public DiscreetColumnOption MyDiscreetColumn { get; set; }

		public static MyTableRow FromPK(SLProtocol protocol, string pk)
		{
			var row = (object[])protocol.GetRow(Parameter.Mytable.tablePid, pk);
			if (row[0] == null)
			{
				return default;
			}

			return new MyTableRow(row);
		}

		public object[] ToProtocolRow()
		{
			return new MytableQActionRow
			{
				Mytableinstance = Instance,
				Mytablemynumericcolumn = MyNumericColumn,
				Mytablemystringcolumn = MyStringColumn,
				Mytablemydiscreetcolumn = (int)MyDiscreetColumn,
			};
		}

		public void SaveToProtocol(SLProtocol protocol)
		{
			if (!protocol.Exists(Parameter.Mytable.tablePid, Instance))
			{
				protocol.AddRow(Parameter.Mytable.tablePid, ToProtocolRow());
			}
			else
			{
				protocol.SetRow(Parameter.Mytable.tablePid, Instance, ToProtocolRow());
			}
		}
	}

	public class MyTable
	{
		public MyTable() { }

		public MyTable(SLProtocol protocol)
		{
			uint[] exampleTableIdx = new uint[]
			{
				Parameter.Mytable.Idx.mytableinstance,
				Parameter.Mytable.Idx.mytablemynumericcolumn,
				Parameter.Mytable.Idx.mytablemystringcolumn,
				Parameter.Mytable.Idx.mytablemydiscreetcolumn,
			};
			object[] exampletable = (object[])protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Mytable.tablePid, exampleTableIdx);
			object[] instance = (object[])exampletable[0];
			object[] myNumericCol = (object[])exampletable[1];
			object[] myStringCol = (object[])exampletable[2];
			object[] myDiscreetCol = (object[])exampletable[3];

			for (int i = 0; i < instance.Length; i++)
			{
				Rows.Add(new MyTableRow(
				instance[i],
				myNumericCol[i],
				myStringCol[i],
				myDiscreetCol[i]));
			}
		}

		public List<MyTableRow> Rows { get; set; } = new List<MyTableRow>();

		public void SaveToProtocol(SLProtocol protocol, bool partial = false)
		{
			// Calculate the batch size, recommended 25000 cells max per fill array, divided by the number of columns.
			var batchSize = 25000 / 4;

			// If full then the first batch needs to be a SaveOption.Full.
			var first = !partial;
			foreach (var batch in Rows.Select(x => x.ToProtocolRow()).Batch(batchSize))
			{
				if (first)
				{
					protocol.FillArray(Parameter.Mytable.tablePid, batch.ToList(), NotifyProtocol.SaveOption.Full);
				}
				else
				{
					protocol.FillArray(Parameter.Mytable.tablePid, batch.ToList(), NotifyProtocol.SaveOption.Partial);
				}
			}
		}
	}
}
